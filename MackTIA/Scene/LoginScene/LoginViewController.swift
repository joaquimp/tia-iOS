//
//  LoginViewController.swift
//  MackTIA
//
//  Created by Joaquim Pessoa Filho on 14/04/16.
//  Copyright (c) 2016 Mackenzie. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import Fabric
import Crashlytics

// Metodos que poderao ser invocados pelo Presenter
protocol LoginViewControllerInput
{
    func displayLoginFailure(viewModel: LoginViewModel)
    func loginAccepted()
}

// Metodos que podem ser invocados no Interector
protocol LoginViewControllerOutput
{
    func validateLogin(request: LoginRequest)
}

class LoginViewController: UIViewController, AKPickerViewDataSource, AKPickerViewDelegate, UITextFieldDelegate, LoginViewControllerInput
{
    @IBOutlet weak var tiaTextField: UITextField!
    @IBOutlet weak var passTextField: UITextField!
    @IBOutlet weak var loginButton: UIButton!
    @IBOutlet weak var campusPickerView: AKPickerView!
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    @IBOutlet weak var whaitingView: UIVisualEffectView!
    @IBOutlet weak var bottomConstraint: NSLayoutConstraint!
    
    var campus:Array<String> {
        return [" Rio de Janeiro "," São Paulo "," Brasília "," UATU "]
    }
    var campusCode:Array<String> {
        return ["006","001","003","011"]
    }
    
    // MARK: VIPER properties
    var output: LoginViewControllerOutput!
    var router: LoginRouter!
    
    
    
    // MARK: Object lifecycle
    
    override func awakeFromNib()
    {
        super.awakeFromNib()
        LoginConfigurator.sharedInstance.configure(self)
    }
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.configView()
    }
    
    private func configView() {
        let paddingViewTia = UIView(frame: CGRect(x: 0, y: 0, width: 15, height: 50))
        let paddingViewPass = UIView(frame: CGRect(x: 0, y: 0, width: 15, height: 50))
        
        let tiaPlaceholder = NSMutableAttributedString(string: NSLocalizedString("tia", comment: "Student Identification")) // Localized text here!
        let rangeTia = NSMakeRange(0, tiaPlaceholder.string.characters.count)
        tiaPlaceholder.addAttribute(NSForegroundColorAttributeName, value: UIColor.whiteColor(), range: rangeTia)
        
        self.tiaTextField.layer.cornerRadius = 7
        self.tiaTextField.leftView = paddingViewTia
        self.tiaTextField.leftViewMode = .Always
        self.tiaTextField.rightView = paddingViewTia
        self.tiaTextField.rightViewMode = .Always
        self.tiaTextField.attributedPlaceholder = tiaPlaceholder
        
        let passPlaceholder = NSMutableAttributedString(string: NSLocalizedString("password", comment: "Password Placeholder")) // Localized text here!
        let rangePass = NSMakeRange(0, passPlaceholder.string.characters.count)
        passPlaceholder.addAttribute(NSForegroundColorAttributeName, value: UIColor.whiteColor(), range: rangePass)
        
        self.passTextField.layer.cornerRadius = 7
        self.passTextField.leftView = paddingViewPass
        self.passTextField.leftViewMode = .Always
        self.passTextField.rightView = paddingViewPass
        self.passTextField.rightViewMode = .Always
        self.passTextField.attributedPlaceholder = passPlaceholder
        
        self.loginButton.layer.cornerRadius = 7
        
        self.campusPickerView.delegate = self
        self.campusPickerView.dataSource = self
        self.campusPickerView.layer.cornerRadius = 7
        self.campusPickerView.selectItem(1, animated: false)
        self.campusPickerView.textColor = UIColor(red: 1, green: 1, blue: 1, alpha: 0.7)
        self.campusPickerView.highlightedTextColor = UIColor.whiteColor()
        
        // este codigo existe para que na storyboard a view e o activityIndicator possam ficar de fundo sem atrapalhar o trabalho do desgin
        self.view.bringSubviewToFront(self.whaitingView)
        self.view.bringSubviewToFront(self.activityIndicator)
        self.activityIndicator.hidden = true
        self.whaitingView.hidden = true
        
        // Observer keyboard events
        NSNotificationCenter.defaultCenter().addObserver(self, selector: #selector(LoginViewController.keyboardWasShow(_:)), name:UIKeyboardWillShowNotification, object: nil);
        NSNotificationCenter.defaultCenter().addObserver(self, selector: #selector(LoginViewController.keyboardWasHide(_:)), name:UIKeyboardWillHideNotification, object: nil);
    }
    
    override func prefersStatusBarHidden() -> Bool {
        return true
    }
    
    // Necessario para evitar problema com notificacoes enviadas para VC que nao existe mais
    deinit {
        NSNotificationCenter.defaultCenter().removeObserver(self);
    }
    
    // Necessario para remover teclado da tela caso o usario toque fora dele
    override func touchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?) {
        self.view.endEditing(true)
    }
    
    // MARK: Event handling
    
    @IBAction func login(sender: AnyObject) {
        // prepare interface
        self.whaitingView.hidden = false
        self.activityIndicator.startAnimating()
        
        // get interface data
        let tia = tiaTextField.text!
        let password = passTextField.text!
        let campus = self.campusCode[self.campusPickerView.selectedItem]
        
        // invoke interector
        let request = LoginRequest(tia: tia, password: password, campus: campus)
        self.output.validateLogin(request)
    }
    
    
    
    // MARK: Display logic
    
    func displayLoginFailure(viewModel: LoginViewModel) {
        let alert = UIAlertController(title: viewModel.errorTitle, message: viewModel.errorMessage, preferredStyle: .Alert)
        alert.addAction(UIAlertAction(title: "OK", style: .Default, handler: nil))
        self.presentViewController(alert, animated: true) { 
            self.activityIndicator?.stopAnimating()
            self.whaitingView.hidden = true
        }
        
        // FABRIC - Login error
        // TODO: melhorar o log no fabric
        Answers.logLoginWithMethod("Digits", success: false, customAttributes: ["metodo":"login no servidor"])
    }
    
    func loginAccepted() {
        self.activityIndicator?.stopAnimating()
        self.router.navigateToMainView()
        
        // FABRIC - Login accpeted
        // TODO: conferir no fabric
        Answers.logLoginWithMethod("Digits", success: false, customAttributes: ["metodo":"login no servidor"])
    }
    
    
    // MARK: Util Methods
    
    func keyboardWasShow(notification: NSNotification) {
        var info = notification.userInfo!
        let keyboardFrame: CGRect = (info[UIKeyboardFrameEndUserInfoKey] as! NSValue).CGRectValue()
        
        UIView.animateWithDuration(0.1, animations: { () -> Void in
            self.bottomConstraint.constant = keyboardFrame.size.height + 20
        })
    }
    
    func keyboardWasHide(notification: NSNotification) {
        UIView.animateWithDuration(0.1, animations: { () -> Void in
            self.bottomConstraint.constant = 102
        })
    }
    
    
    // MARK: - Memory Management
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - AKPickerView
    func numberOfItemsInPickerView(pickerView: AKPickerView) -> Int {
        return self.campus.count
    }
    
    func pickerView(pickerView: AKPickerView, titleForItem item: Int) -> String {
        return self.campusCode[item]
    }
    
    // MARK: - TextFieldDelegate
    func textFieldShouldReturn(textField: UITextField) -> Bool {
        let tag = textField.tag + 1
        if let superview = textField.superview {
            let nextTextField = superview.viewWithTag(tag)
            if nextTextField != nil {
                nextTextField?.becomeFirstResponder()
                return false
            }
        }
        textField.resignFirstResponder()
        return false
    }
    
    // MARK: Rotation Support
    
    override func supportedInterfaceOrientations() -> UIInterfaceOrientationMask {
        return UIInterfaceOrientationMask.Portrait
    }
    
    override func shouldAutorotate() -> Bool {
        return false
    }
}
