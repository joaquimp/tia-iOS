//
//  LoginPresenter.swift
//  MackTIA
//
//  Created by Joaquim Pessoa Filho on 14/04/16.
//  Copyright (c) 2016 Mackenzie. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol LoginPresenterInput {
    func presentLoginError(response: LoginResponse)
    func presentLoginAccepted()
}

protocol LoginPresenterOutput: class {
    func displayLoginFailure(viewModel: LoginViewModel)
    func loginAccepted()
}

class LoginPresenter: LoginPresenterInput {
    weak var output: LoginPresenterOutput!
    
    // MARK: Presentation logic
    
    func presentLoginError(response: LoginResponse) {
        
        var title = NSLocalizedString("login_defaultErrorTitle", comment: "Login Error Title")
        var message = NSLocalizedString("login_defaultErrorMessage", comment: "Default login error message")
        
        guard response.error != nil else {
            let viewModel = LoginViewModel(errorMessage: message, errorTitle: title)
            output.displayLoginFailure(viewModel)
            return
        }
        
        switch response.error! {
        case .InvalidLoginCredentials:
            title = NSLocalizedString("error_invalidLoginCredentials_title", comment: "Credentials problem")
            message = NSLocalizedString("error_invalidLoginCredentials_message", comment: "Credentials problem")
        case .NoInternetConnection:
            title = NSLocalizedString("error_noInternetConnection_title", comment: "Internet problem")
            message = NSLocalizedString("error_noInternetConnection_message", comment: "Internet problem")
        case .DomainNotFound:
            title = NSLocalizedString("error_domainNotFound_title", comment: "Domain problem")
            message = NSLocalizedString("error_domainNotFound_message", comment: "Domain problem")
        }
        
        let viewModel = LoginViewModel(errorMessage: message, errorTitle: title)
        output.displayLoginFailure(viewModel)
    }
    
    func presentLoginAccepted() {
        self.output.loginAccepted()
    }
}
