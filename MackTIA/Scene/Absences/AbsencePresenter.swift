//
//  AbsencePresenter.swift
//  MackTIA
//
//  Created by Aleph Retamal on 4/15/16.
//  Copyright (c) 2016 Mackenzie. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol AbsencePresenterInput {
    func presentFetchedAbsences(_ response: AbsenceResponse)
}

protocol AbsencePresenterOutput: class {
    func displayFetchedAbsences(_ viewModel: AbsenceViewModel.Success)
    func displayFetchedAbsencesError(_ viewModel: AbsenceViewModel.Error)
}

class AbsencePresenter: AbsencePresenterInput
{
    weak var output: AbsencePresenterOutput!
    
    // MARK: Presentation logic
    
    func presentFetchedAbsences(_ response: AbsenceResponse) {
        
        guard response.error == nil else {
            let error:(title:String,message:String) = ErrorParser.parse(response.error!)
            let viewModel = AbsenceViewModel.Error(errorMessage: error.message, errorTitle: error.title)
            output.displayFetchedAbsencesError(viewModel)
            return
        }

        
        let absences = response.absences.map { (absence) -> Absence in
            var ab = absence
            if absence.atualizacao == "00/00/0000" {
                // TODO: localizable.string
                ab.atualizacao = "sem novidades"
            }
            return ab
        }
        
        let viewModel = AbsenceViewModel.Success(displayedAbsences: absences)
        output.displayFetchedAbsences(viewModel)
    }
}
