//
//  AbsenceViewController.swift
//  MackTIA
//
//  Created by Aleph Retamal on 4/15/16.
//  Copyright (c) 2016 Mackenzie. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// Metodos que poderao ser invocados pelo Presenter
protocol AbsenceViewControllerInput {
    func displayFetchedAbsences(viewModel: AbsenceViewModel)
}

// Metodos que podem ser invocados no Interector
protocol AbsenceViewControllerOutput {
    func fetchAbsences(request: AbsenceRequest)
}

class AbsenceViewController: UITableViewController, AbsenceViewControllerInput {
    @IBOutlet weak var reloadButtonItem: UIBarButtonItem!
    var displayedAbsences:[Absence] = []
    
    // MARK: VIPER properties
    var output: AbsenceViewControllerOutput!
    var router: AbsenceRouter!
    
    // Interface Animation Parameters
    var selectedCellIndexPath:NSIndexPath?
    let selectedCellHeight:CGFloat = 150
    let unselectedCellHeight:CGFloat = 58
    
    // MARK: Object lifecycle
    
    override func awakeFromNib() {
        super.awakeFromNib()
        AbsenceConfigurator.sharedInstance.configure(self)
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        fetchAbsences()
        configInterfaceAnimations()
    }
    
    // MARK: Interface Animations
    
    override func tableView(tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 0.1
    }
    
    func configInterfaceAnimations() {
        self.refreshControl?.addTarget(self, action: #selector(AbsenceViewController.handleRefresh(_:)), forControlEvents: UIControlEvents.ValueChanged)
    }
    
    private func startReloadAnimation() {
        reloadButtonItem.enabled = false
    }
    
    private func stopReloadAnimation() {
        reloadButtonItem.enabled = true
        refreshControl?.endRefreshing()
    }
    
    // MARK: Event handling
    
    func handleRefresh(refreshControl: UIRefreshControl) {
        self.startReloadAnimation()
        let delayInSeconds = 1.0;
        let popTime = dispatch_time(DISPATCH_TIME_NOW, Int64(delayInSeconds * Double(NSEC_PER_SEC)));
        dispatch_after(popTime, dispatch_get_main_queue()) { () -> Void in
            self.fetchAbsences()
        }
    }
    
    func fetchAbsences() {
        self.startReloadAnimation()
        let request = AbsenceRequest()
        output.fetchAbsences(request)
    }
    
    @IBAction func refreshAction(sender: AnyObject) {
        fetchAbsences()
    }
    
    // MARK: Display logic
    
    func displayFetchedAbsences(viewModel: AbsenceViewModel) {
        self.stopReloadAnimation()
        displayedAbsences = viewModel.displayedAbsences
        tableView.reloadData()
    }
    
    // MARK: UITableViewDataSource
    
    override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedAbsences.count
    }
    
    override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        let cell = self.tableView.dequeueReusableCellWithIdentifier("faltaCell") as! AbsenceTableViewCell
        let absence = displayedAbsences[indexPath.row]
        
        cell.nomeDaDisciplinaLabel.text = absence.disciplina
        cell.faltasLabel.text = "\(absence.faltas)"
//        TODO: PREENCHER O RESTO DOS OUTLETS
        cell.aulasPrevistasLabel.text = "\(absence.dadas)"
        cell.permitidasLabel.text = "\(absence.permit)"
        cell.progressBarLabel.text = "\(absence.percentual)%"
        cell.atualizadoEmLabel.text = absence.atualizacao
        
        cell.progressBar.maxPercent = 25
        cell.progressBar.endPercent = CGFloat(absence.percentual)
        cell.circleGraph.endArc = CGFloat(absence.percentual/25)
        cell.circleProgressTotalLabel.text = "\(absence.percentual)%"
//        cell.circleProgressLabel.text =
        return cell
    }
    
    override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        if indexPath != self.selectedCellIndexPath {
            self.selectedCellIndexPath = indexPath
        } else {
            if let _ = self.selectedCellIndexPath {
                self.tableView.deselectRowAtIndexPath(self.selectedCellIndexPath!, animated: true)
            }
            self.selectedCellIndexPath = nil
        }
        
        self.tableView.beginUpdates()
        self.tableView.endUpdates()
    }
    
    override func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {
        
        if self.selectedCellIndexPath == indexPath {
            return self.selectedCellHeight
        }
        return self.unselectedCellHeight
    }
    
    // MARK: UITableViewDelegate
}
