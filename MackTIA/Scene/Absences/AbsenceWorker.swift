//
//  AbsenceWorker.swift
//  MackTIA
//
//  Created by Aleph Retamal on 4/15/16.
//  Copyright (c) 2016 Mackenzie. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

class AbsenceWorker {
    
    // MARK: Business Logic
    
    func fetchAbsences(_ completionHandler:@escaping (_ absences:[Absence], _ error: ErrorCode?) -> Void) {
        TIAServer.sharedInstance.sendRequest(service: .Absence) { (jsonData, error) in
            guard let _  = jsonData,
                let response = jsonData!["resposta"] as? [NSDictionary] else {
                    
                    if let _ = jsonData?["erro"] as? String  {
                        completionHandler([], ErrorCode.invalidLoginCredentials(title: NSLocalizedString("error_invalidLoginCredentials_title", comment: "User credentials error"), message: NSLocalizedString("error_invalidLoginCredentials_message", comment: "User credentials error")))
                        return
                    }
                    
                    let errorMessage = ErrorCode.otherFailure(title: NSLocalizedString("absence_InvalidDataTitle", comment: "Problem with grade data from API"), message: NSLocalizedString("absence_InvalidDataMessage", comment: "Problem with absence data from API"))
                    
                    completionHandler([], errorMessage)
                    return
            }
            
            if error != nil {
                completionHandler([], error)
                return
            }
            
            
            completionHandler(self.parseJSON(response), nil)
        }
    }
    
    fileprivate func parseJSON(_ response:[AnyObject]) -> [Absence] {
        var absences:[Absence] = []
        
        for absenceData in response {
            
            // TODO: PEGAR O RESTO DOS ATRIBUTOS
            guard let
                atualizacao     = absenceData["atualizacao"] as? String,
                let codigo      = absenceData["codigo"] as? String,
                let dadas       = absenceData["dadas"] as? Int,
                let disciplina  = absenceData["disciplina"] as? String,
                let faltas      = absenceData["faltas"] as? Int,
                let percentual  = absenceData["percentual"] as? Float,
                let permit      = absenceData["permit"] as? Int,
                let permit20    = absenceData["permit20"] as? Int,
                let turma       = absenceData["turma"] as? String
                else {
                    continue
            }
            
            // TODO: ADD OS ATRIBUTOS AQUI
            absences.append(
                Absence(atualizacao: atualizacao,
                    codigo: codigo,
                    dadas: dadas,
                    disciplina: disciplina,
                    faltas: faltas,
                    percentual: percentual,
                    permit: permit,
                    permit20: permit20,
                    turma: turma)
            )
        }
        
        return absences
    }
}
