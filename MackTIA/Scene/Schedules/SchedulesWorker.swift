//
//  SchedulesWorker.swift
//  MackTIA
//
//  Created by Luciano Moreira Turrini on 8/15/16.
//  Copyright (c) 2016 Mackenzie. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

class SchedulesWorker {
    
    // MARK: Business Logic
    
    func fetchSchedules(_ completionHandler:@escaping (_ schedules:[Schedule], _ error: ErrorCode?) -> Void) {
        TIAServer.sharedInstance.sendRequest(service: .ClassSchedule) { (jsonData, error) in
            guard let _  = jsonData,
                let response = jsonData!["resposta"] as? [NSDictionary] else {
                    
                    if let _ = jsonData?["erro"] as? String  {
                        completionHandler([], ErrorCode.invalidLoginCredentials(title: NSLocalizedString("error_invalidLoginCredentials_title", comment: "User credentials error"), message: NSLocalizedString("error_invalidLoginCredentials_message", comment: "User credentials error")))
                        return
                    }
                    
                    let errorMessage = ErrorCode.otherFailure(title: NSLocalizedString("schedules_InvalidDataTitle", comment: "Problem with schedule data from API"), message: NSLocalizedString("schedules_InvalidDataMessage", comment: "Problem with absence data from API"))
                    
                    completionHandler([], errorMessage)
                    return
            }
            
            if error != nil {
                completionHandler([], error)
                return
            }
            
            // TODO:  arrumar aqui
            
            let schedules = self.parseJSON(response)
            
            completionHandler(schedules, nil)
        }
    }
    
    fileprivate func parseJSON(_ response:[AnyObject]) -> [Schedule] {
        
        var schedules:[Schedule] = []
        
        for scheduleData in response {
            
            // TODO: PEGAR O RESTO DOS ATRIBUTOS
            guard let
                discipline         = scheduleData["nome"] as? String,
                let code           = scheduleData["codigo"] as? String,
                let className      = scheduleData["turma"] as? String,
                let collegeName    = scheduleData["escola_nome"] as? String,
                let buildingNumber = scheduleData["predio"] as? String,
                let numberRoom     = scheduleData["sala"] as? String,
                let auxDate        = scheduleData["hora"] as? String,
                let day            = scheduleData["dia"] as? String,
                let updateAt       = scheduleData["update"] as? String
            else {
                continue
            }
            
            let format = DateFormatter()
            format.dateFormat = "HH:mm"
            format.timeZone = TimeZone(identifier: "GMT-3")
            
            let startTime = format.date(from: auxDate)
            let endTime = startTime?.addingTimeInterval(2700)
            
            // TODO: ADD OS ATRIBUTOS AQUI
            schedules.append(
                Schedule(code: code, discipline: discipline, day: day, className: className, collegeName: collegeName, buildingNumber: buildingNumber, numberRoom: numberRoom, startTime: startTime, endTime: endTime, updatedAt: updateAt)
            )
        }
        
        return schedules
    }
}
