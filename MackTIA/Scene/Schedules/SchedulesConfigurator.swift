//
//  SchedulesConfigurator.swift
//  MackTIA
//
//  Created by Luciano Moreira Turrini on 8/15/16.
//  Copyright (c) 2016 Mackenzie. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: Connect View, Interactor, and Presenter

extension SchedulesViewController: SchedulesPresenterOutput
{
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    router.passDataToNextScene(segue)
  }
}

extension SchedulesInteractor: SchedulesViewControllerOutput
{
}

extension SchedulesPresenter: SchedulesInteractorOutput
{
}

class SchedulesConfigurator
{
//  private static var __once: () = {
//      Static.instance = SchedulesConfigurator()
//    }()
//  // MARK: Object lifecycle
//  
//  class var sharedInstance: SchedulesConfigurator
//  {
//    struct Static {
//      static var instance: SchedulesConfigurator?
//      static var token: Int = 0
//    }
//    
//    _ = SchedulesConfigurator.__once
//    
//    return Static.instance!
//  }

    class var sharedInstance: SchedulesConfigurator {
        struct Static {
            static var instance: SchedulesConfigurator?
            static var doOnce: () {
                Static.instance = SchedulesConfigurator()
            }
        }
        Static.doOnce
        return Static.instance!
    }
    
  // MARK: Configuration
  
  func configure(_ viewController: SchedulesViewController)
  {
    let router = SchedulesRouter()
    router.viewController = viewController
    
    let presenter = SchedulesPresenter()
    presenter.output = viewController
    
    let interactor = SchedulesInteractor()
    interactor.output = presenter
    
    viewController.output = interactor
    viewController.router = router
  }
}
